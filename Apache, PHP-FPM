Install php 8.0, apache, mysql server and memcached on CentOS 8

yum install epel-release
yum update -y

yum module reset php
yum module enable php:8.0

# Install default packages

yum install php-opcache php-ffi php-pear.noarch php-pdo php-mysqlnd php-mbstring php-intl php-fpm php-devel php-cli php-bcmath httpd memcached mysql-server

# Install php-memcached extension
yum install libmemcached-devel zlib-devel fastlz-devel libevent-devel

pecl install igbinary
vi /etc/php.d/40-igbinary.ini
    extension=igbinary.so

pecl install msgpack
vi /etc/php.d/40-msgpack.ini
    extension=msgpack.so

pecl install memcached
vi /etc/php.d/50-memcached.ini
    extension=memcached.so

# auto start services
systemctl enable php-fpm mysqld httpd memcached

systemctl start php-fpm mysqld httpd memcached

# set password
mysql -u root -p
    ALTER USER 'root'@'localhost' IDENTIFIED BY 'Mysql.123';

# Add apache user to vbox user
usermod -a -G vboxsf apache
==========================================================================================================================
APACHE installation
yum install libxml2-devel libXpm-devel gmp-devel libicu-devel t1lib-devel aspell-devel openssl-devel bzip2-devel libcurl-devel libjpeg-devel libvpx-devel libpng-devel freetype-devel readline-devel libtidy-devel libxslt-devel libmcrypt-devel libmcrypto-devel libxml2-devel zlib-devel libmcrypt-devel libmhash-devel mingw32-zlib 

#----------------------------------------------------
./configure --enable-load-all-modules --with-included-apr
#-----------------------------------------------------------
./configure \
--prefix=/usr/local/apache \
--enable-so \
--enable-auth-digest \
--enable-rewrite \
--enable-setenvif \
--enable-mime \
--disable-autoindex \
--enable-deflate \
--enable-ssl \
--with-ssl=/usr/local \
--enable-headers \
--enable-cgi \
--enable-cgid \
--with-included-apr



PHP installation

'./configure' \
'--with-libdir=lib64' \
'--with-apxs2=/usr/local/apache2/bin/apxs' \
'--with-config-file-path=/etc' \
'--with-config-file-scan-dir=/etc/php.d' \
'--with-mysqli' \
'--with-mcrypt' \
'--with-pear' \
'--with-pdo-mysql' \
'--with-mhash' \
'--with-zlib-dir' \
'--with-bz2' \
'--with-gd' \
'--with-jpeg-dir=/usr/lib' \
'--with-png-dir=/usr/lib' \
'--with-freetype-dir=/usr/lib' \
'--with-iconv' \
'--with-xsl' \
'--with-zlib' \
'--with-curl' \
'--with-gettext' \
'--with-openssl' \
'--enable-intl' \
'--enable-exif' \
'--enable-pcntl' \
'--enable-gd-native-ttf' \
'--enable-sockets' \
'--enable-ftp' \
'--enable-mbstring' \
'--enable-mysqlnd' \
'--enable-zip' \
'--enable-soap' \
'--enable-shmop' \
'--enable-bcmath'

#PHP 5
LoadModule php5_module        modules/libphp5.so
AddHandler php5-script .php

#PHP 7
LoadModule php7_module        modules/libphp7.so
AddHandler php7-script .php

#HTTPD.conf
#DirectoryIndex index.html index.htm index.php

vim /usr/local/apache/conf/mime.types
AddType application/x-httpd-php .php
AddType application/x-httpd-php-source .phps

cp /usr/local/apache2/bin/apachectl /etc/init.d/apachectl
chmod +x /etc/init.d/apachectl 

Add the following lines to
vim /etc/init.d/apachectl
# chkconfig: - 85 15
# description: Apache is a web server. 

now you can add apache service to run on reboot.
chkconfig --add apachectl
chkconfig apachectl on 

vim /etc/profile
export PATH=$PATH:/usr/local/bin/


---------------------------------PHP-FPM---------------
'./configure' \
'--prefix=/usr/local/php' \
'--enable-fpm' \
'--with-libdir=lib64' \
'--with-config-file-path=/etc' \
'--with-config-file-scan-dir=/etc/php.d' \
'--with-pear' \
'--enable-bcmath' \
'--with-bz2' \
'--enable-calendar' \
'--with-curl' \
'--enable-exif' \
'--enable-ftp' \
'--with-gd' \
'--with-jpeg-dir' \
'--with-png-dir' \
'--with-freetype-dir' \
'--enable-gd-native-ttf' \
'--with-kerberos' \
'--enable-mbstring' \
'--with-mcrypt' \
'--with-mhash' \
'--with-mysqli' \
'--with-openssl' \
'--with-pcre-regex' \
'--with-pdo-mysql' \
'--with-zlib-dir' \
'--enable-sysvsem' \
'--enable-sysvshm' \
'--enable-sysvmsg' \
'--enable-soap' \
'--enable-sockets' \
'--with-xmlrpc' \
'--enable-zip' \
'--with-zlib' \
'--enable-inline-optimization' \
'--enable-mbregex' \
'--enable-opcache'

make
make install

# Configure php-fpm
cp php.ini-production /etc/php.ini
cp sapi/fpm/init.d.php-fpm.in /etc/init.d/php-fpm
cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf
cp /usr/local/php/bin/php-cgi /usr/local/apache2/cgi-bin/
chmod +x /etc/init.d/php-fpm

# Edit /etc/init.d/php-fpm
prefix=
exec_prefix=

php_fpm_BIN=/usr/local/php/sbin/php-fpm
php_fpm_CONF=/usr/local/php/etc/php-fpm.conf
php_fpm_PID=/var/run/php-fpm.pid

# Edit httpd.conf
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so

<FilesMatch \.php$>
    SetHandler "proxy:fcgi://127.0.0.1:9000"
</FilesMatch>

# PHP-FPM Basic directives
catch_workers_output = yes
Redirect worker stdout and stderr into main error log. If not set, stdout and stderr will be redirected to /dev/null according to FastCGI specs.

pm = dynamic
Changes how PHP-FPM wil spin up PHP workers. The default setting uses the other settings to determine how to act. If you want a fixed number of PHP processes running, you can set this to static, if you only want to create new PHP-FPM processes when requested, use "ondemand", personally I like to use "dynamic" and set the lower limit for spare processes to 2 or 3 so that I always have PHP processes up and ready to handle connections.

pm.max_children = 10
Sets a maximum of 10 PHP-FPM Processes that are allowed to run at the same time. 10 pm.max_children should be a good place to start for most sites. Keep in mind that while this seems low, the average amount of time it takes for a PHP request to complete is somewhere in the 100ms to 200ms range, meaning that if you set this to 1 max children your site could theoretically handle around 5 - 10 requests/s which is a pretty decent amount of traffic if you have that many active connections 24/7.

pm.start_servers = 4
Sets how many PHP workers are activated when PHP-FPM starts up. Having more start servers for PHP-FPM will help to keep response times low when your site gets a sudden burst of traffic. If you configure PHP-FPM to only have 1 pm.start_servers and all of a sudden 5 people visit your site, your server will need to quickly spawn a few more processes, which can increase website load time slightly. This isn't a huge deal, but if you want to keep response times as low as possible make sure you set the start servers to something like 4 or 5 and make sure you configure the min and max spare servers for PHP-FPM to allow for whatever startserver value you pick. 

pm.min_spare_servers = 4
Sets the minimum number of idle process that PHP-FPM will allow to live. If you start PHP-FPM with 4 processes, and want at least 4 PHP-FPM processes all the time then setting this to 4 is a safe bet, if you want to start with 4 processes, but allow for up to 5 idle processes, set this value to 5. 

pm.max_spare_servers= 6
Sets the maximum number of idle processes PHP-FPM will allow to remain alive. If you want to be aggressive in terms of limiting the amount of RAM and CPU that PHP-FPM can use then you will want to configure pm.max_spare_servers to the same as, or slightly higher than pm.start_servers. You cannot set this value to be lower than the min spare servers, or start servers, otherwise PHP-FPM will not start. I would advise setting this value slightly higher than pm.start_servers
